/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_OPERATOR_VAULT_TICKET_DISCRIMINATOR = 5;
export declare function getInitializeOperatorVaultTicketDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type InitializeOperatorVaultTicketInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig extends string | IAccountMeta<string> = string, TAccountOperator extends string | IAccountMeta<string> = string, TAccountVault extends string | IAccountMeta<string> = string, TAccountOperatorVaultTicket extends string | IAccountMeta<string> = string, TAccountAdmin extends string | IAccountMeta<string> = string, TAccountPayer extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountConfig extends string ? ReadonlyAccount<TAccountConfig> : TAccountConfig,
    TAccountOperator extends string ? WritableAccount<TAccountOperator> : TAccountOperator,
    TAccountVault extends string ? ReadonlyAccount<TAccountVault> : TAccountVault,
    TAccountOperatorVaultTicket extends string ? WritableAccount<TAccountOperatorVaultTicket> : TAccountOperatorVaultTicket,
    TAccountAdmin extends string ? ReadonlySignerAccount<TAccountAdmin> & IAccountSignerMeta<TAccountAdmin> : TAccountAdmin,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & IAccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type InitializeOperatorVaultTicketInstructionData = {
    discriminator: number;
};
export type InitializeOperatorVaultTicketInstructionDataArgs = {};
export declare function getInitializeOperatorVaultTicketInstructionDataEncoder(): Encoder<InitializeOperatorVaultTicketInstructionDataArgs>;
export declare function getInitializeOperatorVaultTicketInstructionDataDecoder(): Decoder<InitializeOperatorVaultTicketInstructionData>;
export declare function getInitializeOperatorVaultTicketInstructionDataCodec(): Codec<InitializeOperatorVaultTicketInstructionDataArgs, InitializeOperatorVaultTicketInstructionData>;
export type InitializeOperatorVaultTicketInput<TAccountConfig extends string = string, TAccountOperator extends string = string, TAccountVault extends string = string, TAccountOperatorVaultTicket extends string = string, TAccountAdmin extends string = string, TAccountPayer extends string = string, TAccountSystemProgram extends string = string> = {
    config: Address<TAccountConfig>;
    operator: Address<TAccountOperator>;
    vault: Address<TAccountVault>;
    operatorVaultTicket: Address<TAccountOperatorVaultTicket>;
    admin: TransactionSigner<TAccountAdmin>;
    payer: TransactionSigner<TAccountPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
};
export declare function getInitializeOperatorVaultTicketInstruction<TAccountConfig extends string, TAccountOperator extends string, TAccountVault extends string, TAccountOperatorVaultTicket extends string, TAccountAdmin extends string, TAccountPayer extends string, TAccountSystemProgram extends string>(input: InitializeOperatorVaultTicketInput<TAccountConfig, TAccountOperator, TAccountVault, TAccountOperatorVaultTicket, TAccountAdmin, TAccountPayer, TAccountSystemProgram>): InitializeOperatorVaultTicketInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig, TAccountOperator, TAccountVault, TAccountOperatorVaultTicket, TAccountAdmin, TAccountPayer, TAccountSystemProgram>;
export type ParsedInitializeOperatorVaultTicketInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        config: TAccountMetas[0];
        operator: TAccountMetas[1];
        vault: TAccountMetas[2];
        operatorVaultTicket: TAccountMetas[3];
        admin: TAccountMetas[4];
        payer: TAccountMetas[5];
        systemProgram: TAccountMetas[6];
    };
    data: InitializeOperatorVaultTicketInstructionData;
};
export declare function parseInitializeOperatorVaultTicketInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeOperatorVaultTicketInstruction<TProgram, TAccountMetas>;
