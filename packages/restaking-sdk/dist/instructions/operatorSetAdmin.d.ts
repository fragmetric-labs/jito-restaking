/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
export declare const OPERATOR_SET_ADMIN_DISCRIMINATOR = 19;
export declare function getOperatorSetAdminDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type OperatorSetAdminInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountOperator extends string | IAccountMeta<string> = string, TAccountOldAdmin extends string | IAccountMeta<string> = string, TAccountNewAdmin extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountOperator extends string ? WritableAccount<TAccountOperator> : TAccountOperator,
    TAccountOldAdmin extends string ? ReadonlySignerAccount<TAccountOldAdmin> & IAccountSignerMeta<TAccountOldAdmin> : TAccountOldAdmin,
    TAccountNewAdmin extends string ? ReadonlySignerAccount<TAccountNewAdmin> & IAccountSignerMeta<TAccountNewAdmin> : TAccountNewAdmin,
    ...TRemainingAccounts
]>;
export type OperatorSetAdminInstructionData = {
    discriminator: number;
};
export type OperatorSetAdminInstructionDataArgs = {};
export declare function getOperatorSetAdminInstructionDataEncoder(): Encoder<OperatorSetAdminInstructionDataArgs>;
export declare function getOperatorSetAdminInstructionDataDecoder(): Decoder<OperatorSetAdminInstructionData>;
export declare function getOperatorSetAdminInstructionDataCodec(): Codec<OperatorSetAdminInstructionDataArgs, OperatorSetAdminInstructionData>;
export type OperatorSetAdminInput<TAccountOperator extends string = string, TAccountOldAdmin extends string = string, TAccountNewAdmin extends string = string> = {
    operator: Address<TAccountOperator>;
    oldAdmin: TransactionSigner<TAccountOldAdmin>;
    newAdmin: TransactionSigner<TAccountNewAdmin>;
};
export declare function getOperatorSetAdminInstruction<TAccountOperator extends string, TAccountOldAdmin extends string, TAccountNewAdmin extends string>(input: OperatorSetAdminInput<TAccountOperator, TAccountOldAdmin, TAccountNewAdmin>): OperatorSetAdminInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountOperator, TAccountOldAdmin, TAccountNewAdmin>;
export type ParsedOperatorSetAdminInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        operator: TAccountMetas[0];
        oldAdmin: TAccountMetas[1];
        newAdmin: TAccountMetas[2];
    };
    data: OperatorSetAdminInstructionData;
};
export declare function parseOperatorSetAdminInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedOperatorSetAdminInstruction<TProgram, TAccountMetas>;
