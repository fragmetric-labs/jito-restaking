"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NCN_WARMUP_OPERATOR_DISCRIMINATOR = void 0;
exports.getNcnWarmupOperatorDiscriminatorBytes = getNcnWarmupOperatorDiscriminatorBytes;
exports.getNcnWarmupOperatorInstructionDataEncoder = getNcnWarmupOperatorInstructionDataEncoder;
exports.getNcnWarmupOperatorInstructionDataDecoder = getNcnWarmupOperatorInstructionDataDecoder;
exports.getNcnWarmupOperatorInstructionDataCodec = getNcnWarmupOperatorInstructionDataCodec;
exports.getNcnWarmupOperatorInstruction = getNcnWarmupOperatorInstruction;
exports.parseNcnWarmupOperatorInstruction = parseNcnWarmupOperatorInstruction;
const web3_js_1 = require("@solana/web3.js");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.NCN_WARMUP_OPERATOR_DISCRIMINATOR = 9;
function getNcnWarmupOperatorDiscriminatorBytes() {
    return (0, web3_js_1.getU8Encoder)().encode(exports.NCN_WARMUP_OPERATOR_DISCRIMINATOR);
}
function getNcnWarmupOperatorInstructionDataEncoder() {
    return (0, web3_js_1.transformEncoder)((0, web3_js_1.getStructEncoder)([['discriminator', (0, web3_js_1.getU8Encoder)()]]), (value) => ({ ...value, discriminator: exports.NCN_WARMUP_OPERATOR_DISCRIMINATOR }));
}
function getNcnWarmupOperatorInstructionDataDecoder() {
    return (0, web3_js_1.getStructDecoder)([['discriminator', (0, web3_js_1.getU8Decoder)()]]);
}
function getNcnWarmupOperatorInstructionDataCodec() {
    return (0, web3_js_1.combineCodec)(getNcnWarmupOperatorInstructionDataEncoder(), getNcnWarmupOperatorInstructionDataDecoder());
}
function getNcnWarmupOperatorInstruction(input) {
    // Program address.
    const programAddress = programs_1.JITO_RESTAKING_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        config: { value: input.config ?? null, isWritable: false },
        ncn: { value: input.ncn ?? null, isWritable: false },
        operator: { value: input.operator ?? null, isWritable: false },
        ncnOperatorState: {
            value: input.ncnOperatorState ?? null,
            isWritable: true,
        },
        admin: { value: input.admin ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.config),
            getAccountMeta(accounts.ncn),
            getAccountMeta(accounts.operator),
            getAccountMeta(accounts.ncnOperatorState),
            getAccountMeta(accounts.admin),
        ],
        programAddress,
        data: getNcnWarmupOperatorInstructionDataEncoder().encode({}),
    };
    return instruction;
}
function parseNcnWarmupOperatorInstruction(instruction) {
    if (instruction.accounts.length < 5) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            config: getNextAccount(),
            ncn: getNextAccount(),
            operator: getNextAccount(),
            ncnOperatorState: getNextAccount(),
            admin: getNextAccount(),
        },
        data: getNcnWarmupOperatorInstructionDataDecoder().decode(instruction.data),
    };
}
