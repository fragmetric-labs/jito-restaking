/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
export declare const NCN_DELEGATE_TOKEN_ACCOUNT_DISCRIMINATOR = 22;
export declare function getNcnDelegateTokenAccountDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type NcnDelegateTokenAccountInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountNcn extends string | IAccountMeta<string> = string, TAccountDelegateAdmin extends string | IAccountMeta<string> = string, TAccountTokenMint extends string | IAccountMeta<string> = string, TAccountTokenAccount extends string | IAccountMeta<string> = string, TAccountDelegate extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
    TAccountDelegateAdmin extends string ? ReadonlySignerAccount<TAccountDelegateAdmin> & IAccountSignerMeta<TAccountDelegateAdmin> : TAccountDelegateAdmin,
    TAccountTokenMint extends string ? ReadonlyAccount<TAccountTokenMint> : TAccountTokenMint,
    TAccountTokenAccount extends string ? WritableAccount<TAccountTokenAccount> : TAccountTokenAccount,
    TAccountDelegate extends string ? ReadonlyAccount<TAccountDelegate> : TAccountDelegate,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    ...TRemainingAccounts
]>;
export type NcnDelegateTokenAccountInstructionData = {
    discriminator: number;
};
export type NcnDelegateTokenAccountInstructionDataArgs = {};
export declare function getNcnDelegateTokenAccountInstructionDataEncoder(): Encoder<NcnDelegateTokenAccountInstructionDataArgs>;
export declare function getNcnDelegateTokenAccountInstructionDataDecoder(): Decoder<NcnDelegateTokenAccountInstructionData>;
export declare function getNcnDelegateTokenAccountInstructionDataCodec(): Codec<NcnDelegateTokenAccountInstructionDataArgs, NcnDelegateTokenAccountInstructionData>;
export type NcnDelegateTokenAccountInput<TAccountNcn extends string = string, TAccountDelegateAdmin extends string = string, TAccountTokenMint extends string = string, TAccountTokenAccount extends string = string, TAccountDelegate extends string = string, TAccountTokenProgram extends string = string> = {
    ncn: Address<TAccountNcn>;
    delegateAdmin: TransactionSigner<TAccountDelegateAdmin>;
    tokenMint: Address<TAccountTokenMint>;
    tokenAccount: Address<TAccountTokenAccount>;
    delegate: Address<TAccountDelegate>;
    tokenProgram?: Address<TAccountTokenProgram>;
};
export declare function getNcnDelegateTokenAccountInstruction<TAccountNcn extends string, TAccountDelegateAdmin extends string, TAccountTokenMint extends string, TAccountTokenAccount extends string, TAccountDelegate extends string, TAccountTokenProgram extends string>(input: NcnDelegateTokenAccountInput<TAccountNcn, TAccountDelegateAdmin, TAccountTokenMint, TAccountTokenAccount, TAccountDelegate, TAccountTokenProgram>): NcnDelegateTokenAccountInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountNcn, TAccountDelegateAdmin, TAccountTokenMint, TAccountTokenAccount, TAccountDelegate, TAccountTokenProgram>;
export type ParsedNcnDelegateTokenAccountInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        ncn: TAccountMetas[0];
        delegateAdmin: TAccountMetas[1];
        tokenMint: TAccountMetas[2];
        tokenAccount: TAccountMetas[3];
        delegate: TAccountMetas[4];
        tokenProgram: TAccountMetas[5];
    };
    data: NcnDelegateTokenAccountInstructionData;
};
export declare function parseNcnDelegateTokenAccountInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedNcnDelegateTokenAccountInstruction<TProgram, TAccountMetas>;
