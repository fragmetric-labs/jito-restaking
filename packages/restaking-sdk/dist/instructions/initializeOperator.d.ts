/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_OPERATOR_DISCRIMINATOR = 2;
export declare function getInitializeOperatorDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type InitializeOperatorInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig extends string | IAccountMeta<string> = string, TAccountOperator extends string | IAccountMeta<string> = string, TAccountAdmin extends string | IAccountMeta<string> = string, TAccountBase extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountConfig extends string ? WritableAccount<TAccountConfig> : TAccountConfig,
    TAccountOperator extends string ? WritableAccount<TAccountOperator> : TAccountOperator,
    TAccountAdmin extends string ? WritableSignerAccount<TAccountAdmin> & IAccountSignerMeta<TAccountAdmin> : TAccountAdmin,
    TAccountBase extends string ? ReadonlySignerAccount<TAccountBase> & IAccountSignerMeta<TAccountBase> : TAccountBase,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type InitializeOperatorInstructionData = {
    discriminator: number;
    operatorFeeBps: number;
};
export type InitializeOperatorInstructionDataArgs = {
    operatorFeeBps: number;
};
export declare function getInitializeOperatorInstructionDataEncoder(): Encoder<InitializeOperatorInstructionDataArgs>;
export declare function getInitializeOperatorInstructionDataDecoder(): Decoder<InitializeOperatorInstructionData>;
export declare function getInitializeOperatorInstructionDataCodec(): Codec<InitializeOperatorInstructionDataArgs, InitializeOperatorInstructionData>;
export type InitializeOperatorInput<TAccountConfig extends string = string, TAccountOperator extends string = string, TAccountAdmin extends string = string, TAccountBase extends string = string, TAccountSystemProgram extends string = string> = {
    config: Address<TAccountConfig>;
    operator: Address<TAccountOperator>;
    admin: TransactionSigner<TAccountAdmin>;
    base: TransactionSigner<TAccountBase>;
    systemProgram?: Address<TAccountSystemProgram>;
    operatorFeeBps: InitializeOperatorInstructionDataArgs['operatorFeeBps'];
};
export declare function getInitializeOperatorInstruction<TAccountConfig extends string, TAccountOperator extends string, TAccountAdmin extends string, TAccountBase extends string, TAccountSystemProgram extends string>(input: InitializeOperatorInput<TAccountConfig, TAccountOperator, TAccountAdmin, TAccountBase, TAccountSystemProgram>): InitializeOperatorInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig, TAccountOperator, TAccountAdmin, TAccountBase, TAccountSystemProgram>;
export type ParsedInitializeOperatorInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        config: TAccountMetas[0];
        operator: TAccountMetas[1];
        admin: TAccountMetas[2];
        base: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
    };
    data: InitializeOperatorInstructionData;
};
export declare function parseInitializeOperatorInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeOperatorInstruction<TProgram, TAccountMetas>;
