"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OPERATOR_SET_SECONDARY_ADMIN_DISCRIMINATOR = void 0;
exports.getOperatorSetSecondaryAdminDiscriminatorBytes = getOperatorSetSecondaryAdminDiscriminatorBytes;
exports.getOperatorSetSecondaryAdminInstructionDataEncoder = getOperatorSetSecondaryAdminInstructionDataEncoder;
exports.getOperatorSetSecondaryAdminInstructionDataDecoder = getOperatorSetSecondaryAdminInstructionDataDecoder;
exports.getOperatorSetSecondaryAdminInstructionDataCodec = getOperatorSetSecondaryAdminInstructionDataCodec;
exports.getOperatorSetSecondaryAdminInstruction = getOperatorSetSecondaryAdminInstruction;
exports.parseOperatorSetSecondaryAdminInstruction = parseOperatorSetSecondaryAdminInstruction;
const web3_js_1 = require("@solana/web3.js");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
const types_1 = require("../types");
exports.OPERATOR_SET_SECONDARY_ADMIN_DISCRIMINATOR = 20;
function getOperatorSetSecondaryAdminDiscriminatorBytes() {
    return (0, web3_js_1.getU8Encoder)().encode(exports.OPERATOR_SET_SECONDARY_ADMIN_DISCRIMINATOR);
}
function getOperatorSetSecondaryAdminInstructionDataEncoder() {
    return (0, web3_js_1.transformEncoder)((0, web3_js_1.getStructEncoder)([
        ['discriminator', (0, web3_js_1.getU8Encoder)()],
        ['operatorAdminRole', (0, types_1.getOperatorAdminRoleEncoder)()],
    ]), (value) => ({
        ...value,
        discriminator: exports.OPERATOR_SET_SECONDARY_ADMIN_DISCRIMINATOR,
    }));
}
function getOperatorSetSecondaryAdminInstructionDataDecoder() {
    return (0, web3_js_1.getStructDecoder)([
        ['discriminator', (0, web3_js_1.getU8Decoder)()],
        ['operatorAdminRole', (0, types_1.getOperatorAdminRoleDecoder)()],
    ]);
}
function getOperatorSetSecondaryAdminInstructionDataCodec() {
    return (0, web3_js_1.combineCodec)(getOperatorSetSecondaryAdminInstructionDataEncoder(), getOperatorSetSecondaryAdminInstructionDataDecoder());
}
function getOperatorSetSecondaryAdminInstruction(input) {
    // Program address.
    const programAddress = programs_1.JITO_RESTAKING_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        operator: { value: input.operator ?? null, isWritable: true },
        admin: { value: input.admin ?? null, isWritable: false },
        newAdmin: { value: input.newAdmin ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.operator),
            getAccountMeta(accounts.admin),
            getAccountMeta(accounts.newAdmin),
        ],
        programAddress,
        data: getOperatorSetSecondaryAdminInstructionDataEncoder().encode(args),
    };
    return instruction;
}
function parseOperatorSetSecondaryAdminInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            operator: getNextAccount(),
            admin: getNextAccount(),
            newAdmin: getNextAccount(),
        },
        data: getOperatorSetSecondaryAdminInstructionDataDecoder().decode(instruction.data),
    };
}
