/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_CONFIG_DISCRIMINATOR = 0;
export declare function getInitializeConfigDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type InitializeConfigInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig extends string | IAccountMeta<string> = string, TAccountAdmin extends string | IAccountMeta<string> = string, TAccountVaultProgram extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountConfig extends string ? WritableAccount<TAccountConfig> : TAccountConfig,
    TAccountAdmin extends string ? WritableSignerAccount<TAccountAdmin> & IAccountSignerMeta<TAccountAdmin> : TAccountAdmin,
    TAccountVaultProgram extends string ? ReadonlyAccount<TAccountVaultProgram> : TAccountVaultProgram,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type InitializeConfigInstructionData = {
    discriminator: number;
};
export type InitializeConfigInstructionDataArgs = {};
export declare function getInitializeConfigInstructionDataEncoder(): Encoder<InitializeConfigInstructionDataArgs>;
export declare function getInitializeConfigInstructionDataDecoder(): Decoder<InitializeConfigInstructionData>;
export declare function getInitializeConfigInstructionDataCodec(): Codec<InitializeConfigInstructionDataArgs, InitializeConfigInstructionData>;
export type InitializeConfigInput<TAccountConfig extends string = string, TAccountAdmin extends string = string, TAccountVaultProgram extends string = string, TAccountSystemProgram extends string = string> = {
    config: Address<TAccountConfig>;
    admin: TransactionSigner<TAccountAdmin>;
    vaultProgram: Address<TAccountVaultProgram>;
    systemProgram?: Address<TAccountSystemProgram>;
};
export declare function getInitializeConfigInstruction<TAccountConfig extends string, TAccountAdmin extends string, TAccountVaultProgram extends string, TAccountSystemProgram extends string>(input: InitializeConfigInput<TAccountConfig, TAccountAdmin, TAccountVaultProgram, TAccountSystemProgram>): InitializeConfigInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig, TAccountAdmin, TAccountVaultProgram, TAccountSystemProgram>;
export type ParsedInitializeConfigInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        config: TAccountMetas[0];
        admin: TAccountMetas[1];
        vaultProgram: TAccountMetas[2];
        systemProgram: TAccountMetas[3];
    };
    data: InitializeConfigInstructionData;
};
export declare function parseInitializeConfigInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeConfigInstruction<TProgram, TAccountMetas>;
