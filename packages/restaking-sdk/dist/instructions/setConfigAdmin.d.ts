/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
export declare const SET_CONFIG_ADMIN_DISCRIMINATOR = 24;
export declare function getSetConfigAdminDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type SetConfigAdminInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig extends string | IAccountMeta<string> = string, TAccountOldAdmin extends string | IAccountMeta<string> = string, TAccountNewAdmin extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountConfig extends string ? WritableAccount<TAccountConfig> : TAccountConfig,
    TAccountOldAdmin extends string ? ReadonlySignerAccount<TAccountOldAdmin> & IAccountSignerMeta<TAccountOldAdmin> : TAccountOldAdmin,
    TAccountNewAdmin extends string ? ReadonlyAccount<TAccountNewAdmin> : TAccountNewAdmin,
    ...TRemainingAccounts
]>;
export type SetConfigAdminInstructionData = {
    discriminator: number;
};
export type SetConfigAdminInstructionDataArgs = {};
export declare function getSetConfigAdminInstructionDataEncoder(): Encoder<SetConfigAdminInstructionDataArgs>;
export declare function getSetConfigAdminInstructionDataDecoder(): Decoder<SetConfigAdminInstructionData>;
export declare function getSetConfigAdminInstructionDataCodec(): Codec<SetConfigAdminInstructionDataArgs, SetConfigAdminInstructionData>;
export type SetConfigAdminInput<TAccountConfig extends string = string, TAccountOldAdmin extends string = string, TAccountNewAdmin extends string = string> = {
    config: Address<TAccountConfig>;
    oldAdmin: TransactionSigner<TAccountOldAdmin>;
    newAdmin: Address<TAccountNewAdmin>;
};
export declare function getSetConfigAdminInstruction<TAccountConfig extends string, TAccountOldAdmin extends string, TAccountNewAdmin extends string>(input: SetConfigAdminInput<TAccountConfig, TAccountOldAdmin, TAccountNewAdmin>): SetConfigAdminInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig, TAccountOldAdmin, TAccountNewAdmin>;
export type ParsedSetConfigAdminInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        config: TAccountMetas[0];
        oldAdmin: TAccountMetas[1];
        newAdmin: TAccountMetas[2];
    };
    data: SetConfigAdminInstructionData;
};
export declare function parseSetConfigAdminInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetConfigAdminInstruction<TProgram, TAccountMetas>;
