/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_NCN_VAULT_SLASHER_TICKET_DISCRIMINATOR = 3;
export declare function getInitializeNcnVaultSlasherTicketDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type InitializeNcnVaultSlasherTicketInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig extends string | IAccountMeta<string> = string, TAccountNcn extends string | IAccountMeta<string> = string, TAccountVault extends string | IAccountMeta<string> = string, TAccountSlasher extends string | IAccountMeta<string> = string, TAccountNcnVaultTicket extends string | IAccountMeta<string> = string, TAccountNcnVaultSlasherTicket extends string | IAccountMeta<string> = string, TAccountAdmin extends string | IAccountMeta<string> = string, TAccountPayer extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountConfig extends string ? ReadonlyAccount<TAccountConfig> : TAccountConfig,
    TAccountNcn extends string ? WritableAccount<TAccountNcn> : TAccountNcn,
    TAccountVault extends string ? ReadonlyAccount<TAccountVault> : TAccountVault,
    TAccountSlasher extends string ? ReadonlyAccount<TAccountSlasher> : TAccountSlasher,
    TAccountNcnVaultTicket extends string ? ReadonlyAccount<TAccountNcnVaultTicket> : TAccountNcnVaultTicket,
    TAccountNcnVaultSlasherTicket extends string ? WritableAccount<TAccountNcnVaultSlasherTicket> : TAccountNcnVaultSlasherTicket,
    TAccountAdmin extends string ? ReadonlySignerAccount<TAccountAdmin> & IAccountSignerMeta<TAccountAdmin> : TAccountAdmin,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & IAccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type InitializeNcnVaultSlasherTicketInstructionData = {
    discriminator: number;
    args: bigint;
};
export type InitializeNcnVaultSlasherTicketInstructionDataArgs = {
    args: number | bigint;
};
export declare function getInitializeNcnVaultSlasherTicketInstructionDataEncoder(): Encoder<InitializeNcnVaultSlasherTicketInstructionDataArgs>;
export declare function getInitializeNcnVaultSlasherTicketInstructionDataDecoder(): Decoder<InitializeNcnVaultSlasherTicketInstructionData>;
export declare function getInitializeNcnVaultSlasherTicketInstructionDataCodec(): Codec<InitializeNcnVaultSlasherTicketInstructionDataArgs, InitializeNcnVaultSlasherTicketInstructionData>;
export type InitializeNcnVaultSlasherTicketInput<TAccountConfig extends string = string, TAccountNcn extends string = string, TAccountVault extends string = string, TAccountSlasher extends string = string, TAccountNcnVaultTicket extends string = string, TAccountNcnVaultSlasherTicket extends string = string, TAccountAdmin extends string = string, TAccountPayer extends string = string, TAccountSystemProgram extends string = string> = {
    config: Address<TAccountConfig>;
    ncn: Address<TAccountNcn>;
    vault: Address<TAccountVault>;
    slasher: Address<TAccountSlasher>;
    ncnVaultTicket: Address<TAccountNcnVaultTicket>;
    ncnVaultSlasherTicket: Address<TAccountNcnVaultSlasherTicket>;
    admin: TransactionSigner<TAccountAdmin>;
    payer: TransactionSigner<TAccountPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
    args: InitializeNcnVaultSlasherTicketInstructionDataArgs['args'];
};
export declare function getInitializeNcnVaultSlasherTicketInstruction<TAccountConfig extends string, TAccountNcn extends string, TAccountVault extends string, TAccountSlasher extends string, TAccountNcnVaultTicket extends string, TAccountNcnVaultSlasherTicket extends string, TAccountAdmin extends string, TAccountPayer extends string, TAccountSystemProgram extends string>(input: InitializeNcnVaultSlasherTicketInput<TAccountConfig, TAccountNcn, TAccountVault, TAccountSlasher, TAccountNcnVaultTicket, TAccountNcnVaultSlasherTicket, TAccountAdmin, TAccountPayer, TAccountSystemProgram>): InitializeNcnVaultSlasherTicketInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountConfig, TAccountNcn, TAccountVault, TAccountSlasher, TAccountNcnVaultTicket, TAccountNcnVaultSlasherTicket, TAccountAdmin, TAccountPayer, TAccountSystemProgram>;
export type ParsedInitializeNcnVaultSlasherTicketInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        config: TAccountMetas[0];
        ncn: TAccountMetas[1];
        vault: TAccountMetas[2];
        slasher: TAccountMetas[3];
        ncnVaultTicket: TAccountMetas[4];
        ncnVaultSlasherTicket: TAccountMetas[5];
        admin: TAccountMetas[6];
        payer: TAccountMetas[7];
        systemProgram: TAccountMetas[8];
    };
    data: InitializeNcnVaultSlasherTicketInstructionData;
};
export declare function parseInitializeNcnVaultSlasherTicketInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeNcnVaultSlasherTicketInstruction<TProgram, TAccountMetas>;
