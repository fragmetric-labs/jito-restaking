/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
import { type NcnAdminRole, type NcnAdminRoleArgs } from '../types';
export declare const NCN_SET_SECONDARY_ADMIN_DISCRIMINATOR = 18;
export declare function getNcnSetSecondaryAdminDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type NcnSetSecondaryAdminInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountNcn extends string | IAccountMeta<string> = string, TAccountAdmin extends string | IAccountMeta<string> = string, TAccountNewAdmin extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountNcn extends string ? WritableAccount<TAccountNcn> : TAccountNcn,
    TAccountAdmin extends string ? ReadonlySignerAccount<TAccountAdmin> & IAccountSignerMeta<TAccountAdmin> : TAccountAdmin,
    TAccountNewAdmin extends string ? ReadonlyAccount<TAccountNewAdmin> : TAccountNewAdmin,
    ...TRemainingAccounts
]>;
export type NcnSetSecondaryAdminInstructionData = {
    discriminator: number;
    ncnAdminRole: NcnAdminRole;
};
export type NcnSetSecondaryAdminInstructionDataArgs = {
    ncnAdminRole: NcnAdminRoleArgs;
};
export declare function getNcnSetSecondaryAdminInstructionDataEncoder(): Encoder<NcnSetSecondaryAdminInstructionDataArgs>;
export declare function getNcnSetSecondaryAdminInstructionDataDecoder(): Decoder<NcnSetSecondaryAdminInstructionData>;
export declare function getNcnSetSecondaryAdminInstructionDataCodec(): Codec<NcnSetSecondaryAdminInstructionDataArgs, NcnSetSecondaryAdminInstructionData>;
export type NcnSetSecondaryAdminInput<TAccountNcn extends string = string, TAccountAdmin extends string = string, TAccountNewAdmin extends string = string> = {
    ncn: Address<TAccountNcn>;
    admin: TransactionSigner<TAccountAdmin>;
    newAdmin: Address<TAccountNewAdmin>;
    ncnAdminRole: NcnSetSecondaryAdminInstructionDataArgs['ncnAdminRole'];
};
export declare function getNcnSetSecondaryAdminInstruction<TAccountNcn extends string, TAccountAdmin extends string, TAccountNewAdmin extends string>(input: NcnSetSecondaryAdminInput<TAccountNcn, TAccountAdmin, TAccountNewAdmin>): NcnSetSecondaryAdminInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountNcn, TAccountAdmin, TAccountNewAdmin>;
export type ParsedNcnSetSecondaryAdminInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        ncn: TAccountMetas[0];
        admin: TAccountMetas[1];
        newAdmin: TAccountMetas[2];
    };
    data: NcnSetSecondaryAdminInstructionData;
};
export declare function parseNcnSetSecondaryAdminInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedNcnSetSecondaryAdminInstruction<TProgram, TAccountMetas>;
