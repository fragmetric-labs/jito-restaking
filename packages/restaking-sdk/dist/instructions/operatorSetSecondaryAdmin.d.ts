/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/web3.js';
import { JITO_RESTAKING_PROGRAM_ADDRESS } from '../programs';
import { type OperatorAdminRole, type OperatorAdminRoleArgs } from '../types';
export declare const OPERATOR_SET_SECONDARY_ADMIN_DISCRIMINATOR = 20;
export declare function getOperatorSetSecondaryAdminDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type OperatorSetSecondaryAdminInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountOperator extends string | IAccountMeta<string> = string, TAccountAdmin extends string | IAccountMeta<string> = string, TAccountNewAdmin extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountOperator extends string ? WritableAccount<TAccountOperator> : TAccountOperator,
    TAccountAdmin extends string ? ReadonlySignerAccount<TAccountAdmin> & IAccountSignerMeta<TAccountAdmin> : TAccountAdmin,
    TAccountNewAdmin extends string ? ReadonlyAccount<TAccountNewAdmin> : TAccountNewAdmin,
    ...TRemainingAccounts
]>;
export type OperatorSetSecondaryAdminInstructionData = {
    discriminator: number;
    operatorAdminRole: OperatorAdminRole;
};
export type OperatorSetSecondaryAdminInstructionDataArgs = {
    operatorAdminRole: OperatorAdminRoleArgs;
};
export declare function getOperatorSetSecondaryAdminInstructionDataEncoder(): Encoder<OperatorSetSecondaryAdminInstructionDataArgs>;
export declare function getOperatorSetSecondaryAdminInstructionDataDecoder(): Decoder<OperatorSetSecondaryAdminInstructionData>;
export declare function getOperatorSetSecondaryAdminInstructionDataCodec(): Codec<OperatorSetSecondaryAdminInstructionDataArgs, OperatorSetSecondaryAdminInstructionData>;
export type OperatorSetSecondaryAdminInput<TAccountOperator extends string = string, TAccountAdmin extends string = string, TAccountNewAdmin extends string = string> = {
    operator: Address<TAccountOperator>;
    admin: TransactionSigner<TAccountAdmin>;
    newAdmin: Address<TAccountNewAdmin>;
    operatorAdminRole: OperatorSetSecondaryAdminInstructionDataArgs['operatorAdminRole'];
};
export declare function getOperatorSetSecondaryAdminInstruction<TAccountOperator extends string, TAccountAdmin extends string, TAccountNewAdmin extends string>(input: OperatorSetSecondaryAdminInput<TAccountOperator, TAccountAdmin, TAccountNewAdmin>): OperatorSetSecondaryAdminInstruction<typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountOperator, TAccountAdmin, TAccountNewAdmin>;
export type ParsedOperatorSetSecondaryAdminInstruction<TProgram extends string = typeof JITO_RESTAKING_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        operator: TAccountMetas[0];
        admin: TAccountMetas[1];
        newAdmin: TAccountMetas[2];
    };
    data: OperatorSetSecondaryAdminInstructionData;
};
export declare function parseOperatorSetSecondaryAdminInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedOperatorSetSecondaryAdminInstruction<TProgram, TAccountMetas>;
