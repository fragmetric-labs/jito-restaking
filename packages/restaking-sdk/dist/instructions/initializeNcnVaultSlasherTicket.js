"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.INITIALIZE_NCN_VAULT_SLASHER_TICKET_DISCRIMINATOR = void 0;
exports.getInitializeNcnVaultSlasherTicketDiscriminatorBytes = getInitializeNcnVaultSlasherTicketDiscriminatorBytes;
exports.getInitializeNcnVaultSlasherTicketInstructionDataEncoder = getInitializeNcnVaultSlasherTicketInstructionDataEncoder;
exports.getInitializeNcnVaultSlasherTicketInstructionDataDecoder = getInitializeNcnVaultSlasherTicketInstructionDataDecoder;
exports.getInitializeNcnVaultSlasherTicketInstructionDataCodec = getInitializeNcnVaultSlasherTicketInstructionDataCodec;
exports.getInitializeNcnVaultSlasherTicketInstruction = getInitializeNcnVaultSlasherTicketInstruction;
exports.parseInitializeNcnVaultSlasherTicketInstruction = parseInitializeNcnVaultSlasherTicketInstruction;
const web3_js_1 = require("@solana/web3.js");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.INITIALIZE_NCN_VAULT_SLASHER_TICKET_DISCRIMINATOR = 3;
function getInitializeNcnVaultSlasherTicketDiscriminatorBytes() {
    return (0, web3_js_1.getU8Encoder)().encode(exports.INITIALIZE_NCN_VAULT_SLASHER_TICKET_DISCRIMINATOR);
}
function getInitializeNcnVaultSlasherTicketInstructionDataEncoder() {
    return (0, web3_js_1.transformEncoder)((0, web3_js_1.getStructEncoder)([
        ['discriminator', (0, web3_js_1.getU8Encoder)()],
        ['args', (0, web3_js_1.getU64Encoder)()],
    ]), (value) => ({
        ...value,
        discriminator: exports.INITIALIZE_NCN_VAULT_SLASHER_TICKET_DISCRIMINATOR,
    }));
}
function getInitializeNcnVaultSlasherTicketInstructionDataDecoder() {
    return (0, web3_js_1.getStructDecoder)([
        ['discriminator', (0, web3_js_1.getU8Decoder)()],
        ['args', (0, web3_js_1.getU64Decoder)()],
    ]);
}
function getInitializeNcnVaultSlasherTicketInstructionDataCodec() {
    return (0, web3_js_1.combineCodec)(getInitializeNcnVaultSlasherTicketInstructionDataEncoder(), getInitializeNcnVaultSlasherTicketInstructionDataDecoder());
}
function getInitializeNcnVaultSlasherTicketInstruction(input) {
    // Program address.
    const programAddress = programs_1.JITO_RESTAKING_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        config: { value: input.config ?? null, isWritable: false },
        ncn: { value: input.ncn ?? null, isWritable: true },
        vault: { value: input.vault ?? null, isWritable: false },
        slasher: { value: input.slasher ?? null, isWritable: false },
        ncnVaultTicket: { value: input.ncnVaultTicket ?? null, isWritable: false },
        ncnVaultSlasherTicket: {
            value: input.ncnVaultSlasherTicket ?? null,
            isWritable: true,
        },
        admin: { value: input.admin ?? null, isWritable: false },
        payer: { value: input.payer ?? null, isWritable: true },
        systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.config),
            getAccountMeta(accounts.ncn),
            getAccountMeta(accounts.vault),
            getAccountMeta(accounts.slasher),
            getAccountMeta(accounts.ncnVaultTicket),
            getAccountMeta(accounts.ncnVaultSlasherTicket),
            getAccountMeta(accounts.admin),
            getAccountMeta(accounts.payer),
            getAccountMeta(accounts.systemProgram),
        ],
        programAddress,
        data: getInitializeNcnVaultSlasherTicketInstructionDataEncoder().encode(args),
    };
    return instruction;
}
function parseInitializeNcnVaultSlasherTicketInstruction(instruction) {
    if (instruction.accounts.length < 9) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            config: getNextAccount(),
            ncn: getNextAccount(),
            vault: getNextAccount(),
            slasher: getNextAccount(),
            ncnVaultTicket: getNextAccount(),
            ncnVaultSlasherTicket: getNextAccount(),
            admin: getNextAccount(),
            payer: getNextAccount(),
            systemProgram: getNextAccount(),
        },
        data: getInitializeNcnVaultSlasherTicketInstructionDataDecoder().decode(instruction.data),
    };
}
