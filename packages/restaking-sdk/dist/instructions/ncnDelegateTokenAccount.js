"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NCN_DELEGATE_TOKEN_ACCOUNT_DISCRIMINATOR = void 0;
exports.getNcnDelegateTokenAccountDiscriminatorBytes = getNcnDelegateTokenAccountDiscriminatorBytes;
exports.getNcnDelegateTokenAccountInstructionDataEncoder = getNcnDelegateTokenAccountInstructionDataEncoder;
exports.getNcnDelegateTokenAccountInstructionDataDecoder = getNcnDelegateTokenAccountInstructionDataDecoder;
exports.getNcnDelegateTokenAccountInstructionDataCodec = getNcnDelegateTokenAccountInstructionDataCodec;
exports.getNcnDelegateTokenAccountInstruction = getNcnDelegateTokenAccountInstruction;
exports.parseNcnDelegateTokenAccountInstruction = parseNcnDelegateTokenAccountInstruction;
const web3_js_1 = require("@solana/web3.js");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.NCN_DELEGATE_TOKEN_ACCOUNT_DISCRIMINATOR = 22;
function getNcnDelegateTokenAccountDiscriminatorBytes() {
    return (0, web3_js_1.getU8Encoder)().encode(exports.NCN_DELEGATE_TOKEN_ACCOUNT_DISCRIMINATOR);
}
function getNcnDelegateTokenAccountInstructionDataEncoder() {
    return (0, web3_js_1.transformEncoder)((0, web3_js_1.getStructEncoder)([['discriminator', (0, web3_js_1.getU8Encoder)()]]), (value) => ({
        ...value,
        discriminator: exports.NCN_DELEGATE_TOKEN_ACCOUNT_DISCRIMINATOR,
    }));
}
function getNcnDelegateTokenAccountInstructionDataDecoder() {
    return (0, web3_js_1.getStructDecoder)([['discriminator', (0, web3_js_1.getU8Decoder)()]]);
}
function getNcnDelegateTokenAccountInstructionDataCodec() {
    return (0, web3_js_1.combineCodec)(getNcnDelegateTokenAccountInstructionDataEncoder(), getNcnDelegateTokenAccountInstructionDataDecoder());
}
function getNcnDelegateTokenAccountInstruction(input) {
    // Program address.
    const programAddress = programs_1.JITO_RESTAKING_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        ncn: { value: input.ncn ?? null, isWritable: false },
        delegateAdmin: { value: input.delegateAdmin ?? null, isWritable: false },
        tokenMint: { value: input.tokenMint ?? null, isWritable: false },
        tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
        delegate: { value: input.delegate ?? null, isWritable: false },
        tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Resolve default values.
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.ncn),
            getAccountMeta(accounts.delegateAdmin),
            getAccountMeta(accounts.tokenMint),
            getAccountMeta(accounts.tokenAccount),
            getAccountMeta(accounts.delegate),
            getAccountMeta(accounts.tokenProgram),
        ],
        programAddress,
        data: getNcnDelegateTokenAccountInstructionDataEncoder().encode({}),
    };
    return instruction;
}
function parseNcnDelegateTokenAccountInstruction(instruction) {
    if (instruction.accounts.length < 6) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            ncn: getNextAccount(),
            delegateAdmin: getNextAccount(),
            tokenMint: getNextAccount(),
            tokenAccount: getNextAccount(),
            delegate: getNextAccount(),
            tokenProgram: getNextAccount(),
        },
        data: getNcnDelegateTokenAccountInstructionDataDecoder().decode(instruction.data),
    };
}
