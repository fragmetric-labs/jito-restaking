"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigEncoder = getConfigEncoder;
exports.getConfigDecoder = getConfigDecoder;
exports.getConfigCodec = getConfigCodec;
exports.decodeConfig = decodeConfig;
exports.fetchConfig = fetchConfig;
exports.fetchMaybeConfig = fetchMaybeConfig;
exports.fetchAllConfig = fetchAllConfig;
exports.fetchAllMaybeConfig = fetchAllMaybeConfig;
const web3_js_1 = require("@solana/web3.js");
function getConfigEncoder() {
    return (0, web3_js_1.getStructEncoder)([
        ['discriminator', (0, web3_js_1.getU64Encoder)()],
        ['admin', (0, web3_js_1.getAddressEncoder)()],
        ['vaultProgram', (0, web3_js_1.getAddressEncoder)()],
        ['ncnCount', (0, web3_js_1.getU64Encoder)()],
        ['operatorCount', (0, web3_js_1.getU64Encoder)()],
        ['epochLength', (0, web3_js_1.getU64Encoder)()],
        ['bump', (0, web3_js_1.getU8Encoder)()],
        ['reserved', (0, web3_js_1.getArrayEncoder)((0, web3_js_1.getU8Encoder)(), { size: 263 })],
    ]);
}
function getConfigDecoder() {
    return (0, web3_js_1.getStructDecoder)([
        ['discriminator', (0, web3_js_1.getU64Decoder)()],
        ['admin', (0, web3_js_1.getAddressDecoder)()],
        ['vaultProgram', (0, web3_js_1.getAddressDecoder)()],
        ['ncnCount', (0, web3_js_1.getU64Decoder)()],
        ['operatorCount', (0, web3_js_1.getU64Decoder)()],
        ['epochLength', (0, web3_js_1.getU64Decoder)()],
        ['bump', (0, web3_js_1.getU8Decoder)()],
        ['reserved', (0, web3_js_1.getArrayDecoder)((0, web3_js_1.getU8Decoder)(), { size: 263 })],
    ]);
}
function getConfigCodec() {
    return (0, web3_js_1.combineCodec)(getConfigEncoder(), getConfigDecoder());
}
function decodeConfig(encodedAccount) {
    return (0, web3_js_1.decodeAccount)(encodedAccount, getConfigDecoder());
}
async function fetchConfig(rpc, address, config) {
    const maybeAccount = await fetchMaybeConfig(rpc, address, config);
    (0, web3_js_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeConfig(rpc, address, config) {
    const maybeAccount = await (0, web3_js_1.fetchEncodedAccount)(rpc, address, config);
    return decodeConfig(maybeAccount);
}
async function fetchAllConfig(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeConfig(rpc, addresses, config);
    (0, web3_js_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeConfig(rpc, addresses, config) {
    const maybeAccounts = await (0, web3_js_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeConfig(maybeAccount));
}
