/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount } from '@solana/web3.js';
import { type SlotToggle, type SlotToggleArgs } from '../types';
export type OperatorVaultTicket = {
    discriminator: bigint;
    operator: Address;
    vault: Address;
    index: bigint;
    state: SlotToggle;
    bump: number;
    reserved: Array<number>;
};
export type OperatorVaultTicketArgs = {
    discriminator: number | bigint;
    operator: Address;
    vault: Address;
    index: number | bigint;
    state: SlotToggleArgs;
    bump: number;
    reserved: Array<number>;
};
export declare function getOperatorVaultTicketEncoder(): Encoder<OperatorVaultTicketArgs>;
export declare function getOperatorVaultTicketDecoder(): Decoder<OperatorVaultTicket>;
export declare function getOperatorVaultTicketCodec(): Codec<OperatorVaultTicketArgs, OperatorVaultTicket>;
export declare function decodeOperatorVaultTicket<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<OperatorVaultTicket, TAddress>;
export declare function decodeOperatorVaultTicket<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<OperatorVaultTicket, TAddress>;
export declare function fetchOperatorVaultTicket<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<OperatorVaultTicket, TAddress>>;
export declare function fetchMaybeOperatorVaultTicket<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<OperatorVaultTicket, TAddress>>;
export declare function fetchAllOperatorVaultTicket(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<OperatorVaultTicket>[]>;
export declare function fetchAllMaybeOperatorVaultTicket(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<OperatorVaultTicket>[]>;
