"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNcnVaultTicketEncoder = getNcnVaultTicketEncoder;
exports.getNcnVaultTicketDecoder = getNcnVaultTicketDecoder;
exports.getNcnVaultTicketCodec = getNcnVaultTicketCodec;
exports.decodeNcnVaultTicket = decodeNcnVaultTicket;
exports.fetchNcnVaultTicket = fetchNcnVaultTicket;
exports.fetchMaybeNcnVaultTicket = fetchMaybeNcnVaultTicket;
exports.fetchAllNcnVaultTicket = fetchAllNcnVaultTicket;
exports.fetchAllMaybeNcnVaultTicket = fetchAllMaybeNcnVaultTicket;
const web3_js_1 = require("@solana/web3.js");
const types_1 = require("../types");
function getNcnVaultTicketEncoder() {
    return (0, web3_js_1.getStructEncoder)([
        ['discriminator', (0, web3_js_1.getU64Encoder)()],
        ['ncn', (0, web3_js_1.getAddressEncoder)()],
        ['vault', (0, web3_js_1.getAddressEncoder)()],
        ['index', (0, web3_js_1.getU64Encoder)()],
        ['state', (0, types_1.getSlotToggleEncoder)()],
        ['bump', (0, web3_js_1.getU8Encoder)()],
        ['reserved', (0, web3_js_1.getArrayEncoder)((0, web3_js_1.getU8Encoder)(), { size: 263 })],
    ]);
}
function getNcnVaultTicketDecoder() {
    return (0, web3_js_1.getStructDecoder)([
        ['discriminator', (0, web3_js_1.getU64Decoder)()],
        ['ncn', (0, web3_js_1.getAddressDecoder)()],
        ['vault', (0, web3_js_1.getAddressDecoder)()],
        ['index', (0, web3_js_1.getU64Decoder)()],
        ['state', (0, types_1.getSlotToggleDecoder)()],
        ['bump', (0, web3_js_1.getU8Decoder)()],
        ['reserved', (0, web3_js_1.getArrayDecoder)((0, web3_js_1.getU8Decoder)(), { size: 263 })],
    ]);
}
function getNcnVaultTicketCodec() {
    return (0, web3_js_1.combineCodec)(getNcnVaultTicketEncoder(), getNcnVaultTicketDecoder());
}
function decodeNcnVaultTicket(encodedAccount) {
    return (0, web3_js_1.decodeAccount)(encodedAccount, getNcnVaultTicketDecoder());
}
async function fetchNcnVaultTicket(rpc, address, config) {
    const maybeAccount = await fetchMaybeNcnVaultTicket(rpc, address, config);
    (0, web3_js_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeNcnVaultTicket(rpc, address, config) {
    const maybeAccount = await (0, web3_js_1.fetchEncodedAccount)(rpc, address, config);
    return decodeNcnVaultTicket(maybeAccount);
}
async function fetchAllNcnVaultTicket(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeNcnVaultTicket(rpc, addresses, config);
    (0, web3_js_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeNcnVaultTicket(rpc, addresses, config) {
    const maybeAccounts = await (0, web3_js_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeNcnVaultTicket(maybeAccount));
}
