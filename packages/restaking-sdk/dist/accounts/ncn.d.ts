/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount } from '@solana/web3.js';
export type Ncn = {
    discriminator: bigint;
    base: Address;
    admin: Address;
    operatorAdmin: Address;
    vaultAdmin: Address;
    slasherAdmin: Address;
    delegateAdmin: Address;
    metadataAdmin: Address;
    weightTableAdmin: Address;
    ncnProgramAdmin: Address;
    index: bigint;
    operatorCount: bigint;
    vaultCount: bigint;
    slasherCount: bigint;
    bump: number;
    reserved: Array<number>;
};
export type NcnArgs = {
    discriminator: number | bigint;
    base: Address;
    admin: Address;
    operatorAdmin: Address;
    vaultAdmin: Address;
    slasherAdmin: Address;
    delegateAdmin: Address;
    metadataAdmin: Address;
    weightTableAdmin: Address;
    ncnProgramAdmin: Address;
    index: number | bigint;
    operatorCount: number | bigint;
    vaultCount: number | bigint;
    slasherCount: number | bigint;
    bump: number;
    reserved: Array<number>;
};
export declare function getNcnEncoder(): Encoder<NcnArgs>;
export declare function getNcnDecoder(): Decoder<Ncn>;
export declare function getNcnCodec(): Codec<NcnArgs, Ncn>;
export declare function decodeNcn<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<Ncn, TAddress>;
export declare function decodeNcn<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<Ncn, TAddress>;
export declare function fetchNcn<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<Ncn, TAddress>>;
export declare function fetchMaybeNcn<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<Ncn, TAddress>>;
export declare function fetchAllNcn(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<Ncn>[]>;
export declare function fetchAllMaybeNcn(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<Ncn>[]>;
