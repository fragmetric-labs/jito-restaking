/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount } from '@solana/web3.js';
import { type SlotToggle, type SlotToggleArgs } from '../types';
export type NcnOperatorState = {
    discriminator: bigint;
    ncn: Address;
    operator: Address;
    index: bigint;
    ncnOptInState: SlotToggle;
    operatorOptInState: SlotToggle;
    bump: number;
    reserved: Array<number>;
};
export type NcnOperatorStateArgs = {
    discriminator: number | bigint;
    ncn: Address;
    operator: Address;
    index: number | bigint;
    ncnOptInState: SlotToggleArgs;
    operatorOptInState: SlotToggleArgs;
    bump: number;
    reserved: Array<number>;
};
export declare function getNcnOperatorStateEncoder(): Encoder<NcnOperatorStateArgs>;
export declare function getNcnOperatorStateDecoder(): Decoder<NcnOperatorState>;
export declare function getNcnOperatorStateCodec(): Codec<NcnOperatorStateArgs, NcnOperatorState>;
export declare function decodeNcnOperatorState<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<NcnOperatorState, TAddress>;
export declare function decodeNcnOperatorState<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<NcnOperatorState, TAddress>;
export declare function fetchNcnOperatorState<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<NcnOperatorState, TAddress>>;
export declare function fetchMaybeNcnOperatorState<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<NcnOperatorState, TAddress>>;
export declare function fetchAllNcnOperatorState(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<NcnOperatorState>[]>;
export declare function fetchAllMaybeNcnOperatorState(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<NcnOperatorState>[]>;
