"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOperatorEncoder = getOperatorEncoder;
exports.getOperatorDecoder = getOperatorDecoder;
exports.getOperatorCodec = getOperatorCodec;
exports.decodeOperator = decodeOperator;
exports.fetchOperator = fetchOperator;
exports.fetchMaybeOperator = fetchMaybeOperator;
exports.fetchAllOperator = fetchAllOperator;
exports.fetchAllMaybeOperator = fetchAllMaybeOperator;
const web3_js_1 = require("@solana/web3.js");
function getOperatorEncoder() {
    return (0, web3_js_1.getStructEncoder)([
        ['discriminator', (0, web3_js_1.getU64Encoder)()],
        ['base', (0, web3_js_1.getAddressEncoder)()],
        ['admin', (0, web3_js_1.getAddressEncoder)()],
        ['ncnAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['vaultAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['delegateAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['metadataAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['voter', (0, web3_js_1.getAddressEncoder)()],
        ['index', (0, web3_js_1.getU64Encoder)()],
        ['ncnCount', (0, web3_js_1.getU64Encoder)()],
        ['vaultCount', (0, web3_js_1.getU64Encoder)()],
        ['operatorFeeBps', (0, web3_js_1.getU16Encoder)()],
        ['bump', (0, web3_js_1.getU8Encoder)()],
        ['reservedSpace', (0, web3_js_1.getArrayEncoder)((0, web3_js_1.getU8Encoder)(), { size: 261 })],
    ]);
}
function getOperatorDecoder() {
    return (0, web3_js_1.getStructDecoder)([
        ['discriminator', (0, web3_js_1.getU64Decoder)()],
        ['base', (0, web3_js_1.getAddressDecoder)()],
        ['admin', (0, web3_js_1.getAddressDecoder)()],
        ['ncnAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['vaultAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['delegateAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['metadataAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['voter', (0, web3_js_1.getAddressDecoder)()],
        ['index', (0, web3_js_1.getU64Decoder)()],
        ['ncnCount', (0, web3_js_1.getU64Decoder)()],
        ['vaultCount', (0, web3_js_1.getU64Decoder)()],
        ['operatorFeeBps', (0, web3_js_1.getU16Decoder)()],
        ['bump', (0, web3_js_1.getU8Decoder)()],
        ['reservedSpace', (0, web3_js_1.getArrayDecoder)((0, web3_js_1.getU8Decoder)(), { size: 261 })],
    ]);
}
function getOperatorCodec() {
    return (0, web3_js_1.combineCodec)(getOperatorEncoder(), getOperatorDecoder());
}
function decodeOperator(encodedAccount) {
    return (0, web3_js_1.decodeAccount)(encodedAccount, getOperatorDecoder());
}
async function fetchOperator(rpc, address, config) {
    const maybeAccount = await fetchMaybeOperator(rpc, address, config);
    (0, web3_js_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeOperator(rpc, address, config) {
    const maybeAccount = await (0, web3_js_1.fetchEncodedAccount)(rpc, address, config);
    return decodeOperator(maybeAccount);
}
async function fetchAllOperator(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeOperator(rpc, addresses, config);
    (0, web3_js_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeOperator(rpc, addresses, config) {
    const maybeAccounts = await (0, web3_js_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeOperator(maybeAccount));
}
