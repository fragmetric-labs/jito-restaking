"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNcnEncoder = getNcnEncoder;
exports.getNcnDecoder = getNcnDecoder;
exports.getNcnCodec = getNcnCodec;
exports.decodeNcn = decodeNcn;
exports.fetchNcn = fetchNcn;
exports.fetchMaybeNcn = fetchMaybeNcn;
exports.fetchAllNcn = fetchAllNcn;
exports.fetchAllMaybeNcn = fetchAllMaybeNcn;
const web3_js_1 = require("@solana/web3.js");
function getNcnEncoder() {
    return (0, web3_js_1.getStructEncoder)([
        ['discriminator', (0, web3_js_1.getU64Encoder)()],
        ['base', (0, web3_js_1.getAddressEncoder)()],
        ['admin', (0, web3_js_1.getAddressEncoder)()],
        ['operatorAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['vaultAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['slasherAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['delegateAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['metadataAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['weightTableAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['ncnProgramAdmin', (0, web3_js_1.getAddressEncoder)()],
        ['index', (0, web3_js_1.getU64Encoder)()],
        ['operatorCount', (0, web3_js_1.getU64Encoder)()],
        ['vaultCount', (0, web3_js_1.getU64Encoder)()],
        ['slasherCount', (0, web3_js_1.getU64Encoder)()],
        ['bump', (0, web3_js_1.getU8Encoder)()],
        ['reserved', (0, web3_js_1.getArrayEncoder)((0, web3_js_1.getU8Encoder)(), { size: 263 })],
    ]);
}
function getNcnDecoder() {
    return (0, web3_js_1.getStructDecoder)([
        ['discriminator', (0, web3_js_1.getU64Decoder)()],
        ['base', (0, web3_js_1.getAddressDecoder)()],
        ['admin', (0, web3_js_1.getAddressDecoder)()],
        ['operatorAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['vaultAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['slasherAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['delegateAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['metadataAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['weightTableAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['ncnProgramAdmin', (0, web3_js_1.getAddressDecoder)()],
        ['index', (0, web3_js_1.getU64Decoder)()],
        ['operatorCount', (0, web3_js_1.getU64Decoder)()],
        ['vaultCount', (0, web3_js_1.getU64Decoder)()],
        ['slasherCount', (0, web3_js_1.getU64Decoder)()],
        ['bump', (0, web3_js_1.getU8Decoder)()],
        ['reserved', (0, web3_js_1.getArrayDecoder)((0, web3_js_1.getU8Decoder)(), { size: 263 })],
    ]);
}
function getNcnCodec() {
    return (0, web3_js_1.combineCodec)(getNcnEncoder(), getNcnDecoder());
}
function decodeNcn(encodedAccount) {
    return (0, web3_js_1.decodeAccount)(encodedAccount, getNcnDecoder());
}
async function fetchNcn(rpc, address, config) {
    const maybeAccount = await fetchMaybeNcn(rpc, address, config);
    (0, web3_js_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeNcn(rpc, address, config) {
    const maybeAccount = await (0, web3_js_1.fetchEncodedAccount)(rpc, address, config);
    return decodeNcn(maybeAccount);
}
async function fetchAllNcn(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeNcn(rpc, addresses, config);
    (0, web3_js_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeNcn(rpc, addresses, config) {
    const maybeAccounts = await (0, web3_js_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeNcn(maybeAccount));
}
