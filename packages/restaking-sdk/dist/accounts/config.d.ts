/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount } from '@solana/web3.js';
export type Config = {
    discriminator: bigint;
    admin: Address;
    vaultProgram: Address;
    ncnCount: bigint;
    operatorCount: bigint;
    epochLength: bigint;
    bump: number;
    reserved: Array<number>;
};
export type ConfigArgs = {
    discriminator: number | bigint;
    admin: Address;
    vaultProgram: Address;
    ncnCount: number | bigint;
    operatorCount: number | bigint;
    epochLength: number | bigint;
    bump: number;
    reserved: Array<number>;
};
export declare function getConfigEncoder(): Encoder<ConfigArgs>;
export declare function getConfigDecoder(): Decoder<Config>;
export declare function getConfigCodec(): Codec<ConfigArgs, Config>;
export declare function decodeConfig<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<Config, TAddress>;
export declare function decodeConfig<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<Config, TAddress>;
export declare function fetchConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<Config, TAddress>>;
export declare function fetchMaybeConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<Config, TAddress>>;
export declare function fetchAllConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<Config>[]>;
export declare function fetchAllMaybeConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<Config>[]>;
