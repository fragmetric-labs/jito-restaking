/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, type SolanaError } from '@solana/web3.js';
/** BadEpochLength: Bad epoch length */
export declare const JITO_RESTAKING_ERROR__BAD_EPOCH_LENGTH = 0;
/** NcnOperatorAdminInvalid: NcnOperatorAdminInvalid */
export declare const JITO_RESTAKING_ERROR__NCN_OPERATOR_ADMIN_INVALID = 1000;
/** NcnCooldownOperatorFailed: NcnCooldownOperatorFailed */
export declare const JITO_RESTAKING_ERROR__NCN_COOLDOWN_OPERATOR_FAILED = 1001;
/** NcnSlasherAdminInvalid: NcnSlasherAdminInvalid */
export declare const JITO_RESTAKING_ERROR__NCN_SLASHER_ADMIN_INVALID = 1002;
/** NcnVaultAdminInvalid: NcnVaultAdminInvalid */
export declare const JITO_RESTAKING_ERROR__NCN_VAULT_ADMIN_INVALID = 1003;
/** NcnAdminInvalid: NcnAdminInvalid */
export declare const JITO_RESTAKING_ERROR__NCN_ADMIN_INVALID = 1004;
/** NcnDelegateAdminInvalid: NcnDelegateAdminInvalid */
export declare const JITO_RESTAKING_ERROR__NCN_DELEGATE_ADMIN_INVALID = 1005;
/** NcnVaultSlasherTicketFailedCooldown: NcnVaultSlasherTicketFailedCooldown */
export declare const JITO_RESTAKING_ERROR__NCN_VAULT_SLASHER_TICKET_FAILED_COOLDOWN = 1006;
/** NcnVaultTicketFailedCooldown: NcnVaultTicketFailedCooldown */
export declare const JITO_RESTAKING_ERROR__NCN_VAULT_TICKET_FAILED_COOLDOWN = 1007;
/** NcnWarmupOperatorFailed: NcnWarmupOperatorFailed */
export declare const JITO_RESTAKING_ERROR__NCN_WARMUP_OPERATOR_FAILED = 1008;
/** NcnVaultSlasherTicketFailedWarmup: NcnVaultSlasherTicketFailedWarmup */
export declare const JITO_RESTAKING_ERROR__NCN_VAULT_SLASHER_TICKET_FAILED_WARMUP = 1009;
/** NcnVaultTicketFailedWarmup: NcnVaultTicketFailedWarmup */
export declare const JITO_RESTAKING_ERROR__NCN_VAULT_TICKET_FAILED_WARMUP = 1010;
/** OperatorNcnAdminInvalid: OperatorNcnAdminInvalid */
export declare const JITO_RESTAKING_ERROR__OPERATOR_NCN_ADMIN_INVALID = 2000;
/** OperatorVaultAdminInvalid: OperatorVaultAdminInvalid */
export declare const JITO_RESTAKING_ERROR__OPERATOR_VAULT_ADMIN_INVALID = 2001;
/** OperatorAdminInvalid: OperatorAdminInvalid */
export declare const JITO_RESTAKING_ERROR__OPERATOR_ADMIN_INVALID = 2002;
/** OperatorDelegateAdminInvalid: OperatorDelegateAdminInvalid */
export declare const JITO_RESTAKING_ERROR__OPERATOR_DELEGATE_ADMIN_INVALID = 2003;
/** OperatorCooldownNcnFailed: OperatorCooldownNcnFailed */
export declare const JITO_RESTAKING_ERROR__OPERATOR_COOLDOWN_NCN_FAILED = 2004;
/** OperatorVaultTicketFailedCooldown: OperatorVaultTicketFailedCooldown */
export declare const JITO_RESTAKING_ERROR__OPERATOR_VAULT_TICKET_FAILED_COOLDOWN = 2005;
/** OperatorVaultTicketFailedWarmup: OperatorVaultTicketFailedWarmup */
export declare const JITO_RESTAKING_ERROR__OPERATOR_VAULT_TICKET_FAILED_WARMUP = 2006;
/** OperatorWarmupNcnFailed: OperatorWarmupNcnFailed */
export declare const JITO_RESTAKING_ERROR__OPERATOR_WARMUP_NCN_FAILED = 2007;
/** OperatorFeeCapExceeded: OperatorFeeCapExceeded */
export declare const JITO_RESTAKING_ERROR__OPERATOR_FEE_CAP_EXCEEDED = 2008;
/** NcnOverflow: NcnOverflow */
export declare const JITO_RESTAKING_ERROR__NCN_OVERFLOW = 2009;
/** OperatorOverflow: OperatorOverflow */
export declare const JITO_RESTAKING_ERROR__OPERATOR_OVERFLOW = 2010;
/** VaultOverflow: VaultOverflow */
export declare const JITO_RESTAKING_ERROR__VAULT_OVERFLOW = 2011;
/** SlasherOverflow: SlasherOverflow */
export declare const JITO_RESTAKING_ERROR__SLASHER_OVERFLOW = 2012;
/** InvalidEpochLength: InvalidEpochLength */
export declare const JITO_RESTAKING_ERROR__INVALID_EPOCH_LENGTH = 2013;
/** ConfigAdminInvalid: ConfigAdminInvalid */
export declare const JITO_RESTAKING_ERROR__CONFIG_ADMIN_INVALID = 2014;
/** ArithmeticOverflow: ArithmeticOverflow */
export declare const JITO_RESTAKING_ERROR__ARITHMETIC_OVERFLOW = 3000;
/** ArithmeticUnderflow: ArithmeticUnderflow */
export declare const JITO_RESTAKING_ERROR__ARITHMETIC_UNDERFLOW = 3001;
/** DivisionByZero: DivisionByZero */
export declare const JITO_RESTAKING_ERROR__DIVISION_BY_ZERO = 3002;
export type JitoRestakingError = typeof JITO_RESTAKING_ERROR__ARITHMETIC_OVERFLOW | typeof JITO_RESTAKING_ERROR__ARITHMETIC_UNDERFLOW | typeof JITO_RESTAKING_ERROR__BAD_EPOCH_LENGTH | typeof JITO_RESTAKING_ERROR__CONFIG_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__DIVISION_BY_ZERO | typeof JITO_RESTAKING_ERROR__INVALID_EPOCH_LENGTH | typeof JITO_RESTAKING_ERROR__NCN_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__NCN_COOLDOWN_OPERATOR_FAILED | typeof JITO_RESTAKING_ERROR__NCN_DELEGATE_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__NCN_OPERATOR_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__NCN_OVERFLOW | typeof JITO_RESTAKING_ERROR__NCN_SLASHER_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__NCN_VAULT_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__NCN_VAULT_SLASHER_TICKET_FAILED_COOLDOWN | typeof JITO_RESTAKING_ERROR__NCN_VAULT_SLASHER_TICKET_FAILED_WARMUP | typeof JITO_RESTAKING_ERROR__NCN_VAULT_TICKET_FAILED_COOLDOWN | typeof JITO_RESTAKING_ERROR__NCN_VAULT_TICKET_FAILED_WARMUP | typeof JITO_RESTAKING_ERROR__NCN_WARMUP_OPERATOR_FAILED | typeof JITO_RESTAKING_ERROR__OPERATOR_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__OPERATOR_COOLDOWN_NCN_FAILED | typeof JITO_RESTAKING_ERROR__OPERATOR_DELEGATE_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__OPERATOR_FEE_CAP_EXCEEDED | typeof JITO_RESTAKING_ERROR__OPERATOR_NCN_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__OPERATOR_OVERFLOW | typeof JITO_RESTAKING_ERROR__OPERATOR_VAULT_ADMIN_INVALID | typeof JITO_RESTAKING_ERROR__OPERATOR_VAULT_TICKET_FAILED_COOLDOWN | typeof JITO_RESTAKING_ERROR__OPERATOR_VAULT_TICKET_FAILED_WARMUP | typeof JITO_RESTAKING_ERROR__OPERATOR_WARMUP_NCN_FAILED | typeof JITO_RESTAKING_ERROR__SLASHER_OVERFLOW | typeof JITO_RESTAKING_ERROR__VAULT_OVERFLOW;
export declare function getJitoRestakingErrorMessage(code: JitoRestakingError): string;
export declare function isJitoRestakingError<TProgramErrorCode extends JitoRestakingError>(error: unknown, transactionMessage: {
    instructions: Record<number, {
        programAddress: Address;
    }>;
}, code?: TProgramErrorCode): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> & Readonly<{
    context: Readonly<{
        code: TProgramErrorCode;
    }>;
}>;
